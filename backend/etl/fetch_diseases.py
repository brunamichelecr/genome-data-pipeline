# Importa a biblioteca Entrez da Biopython para acessar a base de dados da NCBI
from Bio import Entrez
import time

# Importa fun√ß√£o personalizada para obter conex√£o com o banco de dados local
from backend.db import get_connection

# Define o e-mail obrigat√≥rio para uso da API Entrez (usado para controle e contato em caso de abuso)
Entrez.email = "brunamichelecr@gmail.com"

def fetch_mesh_info(disease_name):
    """
    Busca informa√ß√µes MeSH (Medical Subject Headings) para uma doen√ßa espec√≠fica.
    
    Par√¢metros:
        disease_name (str): Nome da doen√ßa a ser pesquisada.
    
    Retorna:
        dict: Cont√©m o ID MeSH, descri√ß√£o e sin√¥nimos da doen√ßa.
        None: Se n√£o encontrar resultados ou ocorrer erro.
    """
    try:
        # Realiza busca na base MeSH usando o nome da doen√ßa como termo
        search_handle = Entrez.esearch(db="mesh", term=f"{disease_name}[MeSH Terms]")
        search_results = Entrez.read(search_handle)
        search_handle.close()

        # Verifica se houve resultados; se n√£o, retorna None
        if not search_results["IdList"]:
            return None

        # Extrai o primeiro ID MeSH encontrado
        mesh_id = str(search_results["IdList"][0])

        # Busca o resumo (descri√ß√£o e sin√¥nimos) do termo MeSH
        summary_handle = Entrez.esummary(db="mesh", id=mesh_id)
        summary_results = Entrez.read(summary_handle)
        summary_handle.close()

        # Extrai a descri√ß√£o e os sin√¥nimos (se existirem)
        description = summary_results[0].get("DS_ScopeNote", "")
        synonyms = summary_results[0].get("DS_MeshTerms", [])

        # Retorna os dados estruturados
        return {
            "mesh_id": mesh_id,
            "description": description,
            "synonym": ";".join(synonyms)  # Junta os sin√¥nimos em uma √∫nica string separada por ponto e v√≠rgula
        }

    except Exception as e:
        # Log de erro para facilitar depura√ß√£o
        print(f"Erro ao buscar MeSH para '{disease_name}': {e}")
        return None

def update_disease_info():
    """
    Atualiza a tabela 'diseases' no banco de dados com informa√ß√µes MeSH:
    descri√ß√£o, ID MeSH e sin√¥nimos.
    """
    # Conecta ao banco de dados
    conn = get_connection()
    cur = conn.cursor()

    # Seleciona todos os nomes de doen√ßas da tabela
    cur.execute("SELECT disease_name FROM diseases")
    rows = cur.fetchall()

    # Itera sobre cada doen√ßa e atualiza com dados MeSH
    for row in rows:
        disease_name = row[0]
        info = fetch_mesh_info(disease_name)

        # Exibe progresso no terminal
        print(f"üîç {disease_name} ‚Üí {info}")

        if info:
            # Atualiza os campos da doen√ßa com os dados obtidos
            cur.execute("""
                UPDATE diseases
                SET disease_desc = %s,
                    mesh_id = %s,
                    disease_synonym = %s
                WHERE disease_name = %s
            """, (
                info["description"],
                info["mesh_id"],
                info["synonym"],
                disease_name
            ))

            print(f"‚úÖ Atualizado: {disease_name}")
        else:
            # Caso n√£o encontre dados MeSH
            print(f"‚ö†Ô∏è N√£o encontrado: {disease_name}")

        # Pausa entre requisi√ß√µes para evitar sobrecarga na API da NCBI
        time.sleep(0.4)

    # Confirma as altera√ß√µes no banco
    conn.commit()

    # Encerra conex√£o com o banco
    cur.close()
    conn.close()

# Executa a fun√ß√£o principal ao rodar o script
update_disease_info()